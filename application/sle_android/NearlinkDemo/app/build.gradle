plugins {
    id 'com.android.application'
}

static def buildTime() {
    return new Date().format("yyyyMMdd-HHmm", TimeZone.getDefault())
}

android {
    namespace 'com.nearlink.demo'
    compileSdk 31

    defaultConfig {
        applicationId "com.nearlink.demo"
        minSdk 28
        targetSdk 31
        versionCode 1
        versionName "1.0.5"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 显示app名称+当前版本号  加入打包时间
                def fileName = "NearlinkDemo"
                output.outputFileName = "${fileName}-${buildTime()}.apk"
            }
        }
    }
}

dependencies {
    compileOnly files('libs/framework.jar')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

preBuild {
    doLast {
        def imlFile = file("../.idea/modules/app/" + rootProject.name + ".app.main.iml")
        println('[doLast] imlFile ' + imlFile.getPath())
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            println "no iml found"
        }
    }
}